// 📁 backend/index.cjs
// 서버 엔트리: /auth(비보호) + /api/*(보호 라우트들) 등록, SPA 정적 제공(옵션)

const path = require("path");
const express = require("express");
const cors = require("cors");
require("dotenv").config();

const app = express();
const port = process.env.PORT || 5000;

// ─────────────────────────────────────────────────────
// 기본 설정
// ─────────────────────────────────────────────────────
app.set("trust proxy", true);            // Nginx 뒤에 있을 때 클라이언트 IP 등 신뢰
app.use(cors());                         // 필요하면 origin 화이트리스트로 제한
app.use(express.json({ limit: "2mb" })); // JSON 바디 파서

// (선택) 요청 로깅 - 디버그용
app.use((req, _res, next) => {
  if (process.env.NODE_ENV !== "production") {
    console.log(`➡ ${req.method} ${req.originalUrl}`);
  }
  next();
});

// ─────────────────────────────────────────────────────
// 라우터 로드
// ─────────────────────────────────────────────────────
const authRoutes = require("./routes/auth.cjs");            // 로그인/회원가입/프로필 등 (비보호)
const lineOrderRoutes = require("./routes/lineOrder.cjs");  // 설비 순서 (각 라우트 안에서 requireAuth 사용)
const powerTypeRoutes = require("./routes/powerType.cjs");  // 전력유형 저장/조회 API
const powercustomRoutes = require("./routes/powercustom.cjs"); // ★ 추가: /day-all, /day 전용

// ─────────────────────────────────────────────────────
// 라우터 마운트 순서 중요: /auth 먼저
// ─────────────────────────────────────────────────────
app.use("/auth", authRoutes);
app.use("/api/equipment", lineOrderRoutes);
app.use("/api/powertype", powerTypeRoutes);

// ★ 추가: 프론트 기존 경로(/api/power-data/day-all, /day) 유지용
app.use("/api/power-data", powercustomRoutes);

// (옵션) 헬스체크
app.get("/healthz", (_req, res) => res.json({ ok: true }));

// ─────────────────────────────────────────────────────
// 정적 파일 제공 (리액트 빌드 결과물) — Nginx가 제공하면 주석 처리 가능
// ─────────────────────────────────────────────────────
const distDir = path.join(__dirname, "../femspj/dist");
app.use(express.static(distDir));

// SPA 새로고침 대응
app.get("*", (req, res, next) => {
  // API/AUTH 경로는 패스
  if (req.path.startsWith("/api/") || req.path.startsWith("/auth/") || req.path === "/healthz") {
    return next();
  }
  res.sendFile(path.join(distDir, "index.html"));
});

// ─────────────────────────────────────────────────────
// 에러 핸들러 (최후의 보루)
// ─────────────────────────────────────────────────────
app.use((err, _req, res, _next) => {
  console.error("🔥 Unhandled error:", err);
  res.status(500).json({ ok: false, message: "Internal Server Error" });
});

// ─────────────────────────────────────────────────────
// 서버 시작
// ─────────────────────────────────────────────────────
const powerDataRoutes = require("./routes/powerData.cjs");
app.use("/api/power-data", powerDataRoutes);
app.listen(port, () => {
  console.log(`🚀 server listening on http://localhost:${port}`);
});
